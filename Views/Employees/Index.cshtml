@model IEnumerable<Employee_Management_System.Models.Employee>
@{
    ViewData["Title"] = "Employee List";
}

<h2 class="mb-4">Employee List</h2>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<input type="file" id="excelFile" accept=".xlsx, .xls" class="form-control mb-2" />
<button onclick="uploadExcelToDatabase()" class="btn btn-success mb-3">Upload to Database</button>
<button onclick="downloadTableAsExcel()" class="btn btn-primary mb-3">Download Excel</button>


<table id="myTable" class="table table-bordered table-striped">
    <thead class="table-dark">
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Contact No</th>        
            <th>City</th>
            <th>State</th>
            <th>Pincode</th>
            <th>Designation</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var emp in Model)
        {
            <tr>
                <td>@emp.Name</td>
                <td>@emp.Email</td>
                <td>@emp.ContactNo</td>             
                <td>@emp.City</td>
                <td>@emp.State</td>
                <td>@emp.Pincode</td>
                <td>@emp.Designation</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@emp.Id" class="btn btn-warning btn-sm">Edit</a>
                    <a asp-action="Delete" asp-route-id="@emp.Id" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this employee?');"> Delete </a>
                </td>
            </tr>
        }
    </tbody>
</table>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
    function downloadTableAsExcel() {
        const table = document.querySelector("#myTable");

        if (!table) {
            alert("No table data to download.");
            return;
        }
        const rows = Array.from(table.querySelectorAll('tr'));
        const data = [];

        rows.forEach((row, rowIndex) => {
            const rowData = [];
            const cells = row.querySelectorAll('td, th'); 

            cells.forEach((cell, cellIndex) => {
                if (cellIndex !== cells.length - 1) {
                    rowData.push(cell.innerText.trim()); 
                }
            });

            if (rowData.length > 0) {
                data.push(rowData); 
            }
        });
        const worksheet = XLSX.utils.aoa_to_sheet(data);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Employees");
        XLSX.writeFile(workbook, "EmployeeList.xlsx");
    }
</script>
<script>
    async function uploadExcelToDatabase() {
        const file = document.getElementById("excelFile").files[0];
        if (!file) {
            alert("Please select an Excel file.");
            return;
        }

        const reader = new FileReader();
        reader.onload = async function (e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: "array" });
                const sheet = workbook.Sheets[workbook.SheetNames[0]];
                const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: "" });

                // Match the model fields
                const formattedData = jsonData
                    .map(item => ({
                        name: item["Name"]?.trim(),
                        email: item["Email"]?.trim(),
                        contactNo: item["Contact No"]?.toString().trim(),
                        city: item["City"]?.trim(),
                        state: item["State"]?.trim(),
                        pincode: item["Pincode"]?.trim(),
                        designation: item["Designation"]?.trim()
                    }))
                    .filter(emp =>
                        emp.name && emp.email && emp.contactNo && emp.city &&
                        emp.state && emp.pincode && emp.designation
                    );

                if (formattedData.length === 0) {
                    alert("No valid data to upload. Please check your Excel file.");
                    return;
                }

                const res = await fetch('/api/employeeapi/upload', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formattedData)
                });

                const resultText = await res.text();
                let result = {};
                try {
                    result = JSON.parse(resultText);
                } catch {
                    alert("Invalid server response: " + resultText);
                    return;
                }

                if (res.ok) {
                    alert(result.message || "Upload successful!");
                    location.reload();
                } else {
                    alert("Error: " + (result.message || resultText));
                }
            } catch (err) {
                console.error("Error uploading:", err);
                alert("Upload failed: " + err.message);
            }
        };

        reader.readAsArrayBuffer(file);
    }
</script>



